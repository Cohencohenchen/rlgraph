# Copyright 2018 The YARL-Project, All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from yarl import backend
from yarl.models.model import Model

from yarl.tests.test_util import recursive_assert_almost_equal
import logging
import sys

# Logging config for testing.
logging_formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(message)s',
                                      datefmt='%y-%m-%d %H:%M:%S')
root_logger = logging.getLogger('')
tf_logger = logging.getLogger('tensorflow')
tf_logger.setLevel(level=logging.DEBUG)
print_logging_handler = logging.StreamHandler(stream=sys.stdout)
print_logging_handler.setFormatter(logging_formatter)
print_logging_handler.setLevel(level=logging.DEBUG)
root_logger.setLevel(level=logging.DEBUG)
root_logger.addHandler(print_logging_handler)


class ComponentTest(object):
    """
    A very simple (and limited) Model-wrapper to test a single component in a very easy and straightforward
    way.
    """
    def __init__(self, component, input_spaces=None, seed=10):
        """
        Args:
            component (Component): The Component to be tested (may contain sub-components).
            input_spaces (Optional[dict]): Dict with component's in-Socket names as keys and Space objects as values.
                Describes the input Spaces for the component. None if the Component to be tested has no
                in-Sockets.
            seed (Optional[int]): The seed to use for random-seeding the Model object.
                If None, do not seed the Graph (things may behave non-deterministically).
        """
        self.seed = seed

        # Create our Model.
        self.model = Model.from_spec(backend, execution_spec=dict(seed=self.seed))
        self.model.reset_backend()
        # Add the component to test and expose all its Sockets to the core component of our Model.
        self.core = self.model.get_default_model()
        self.core.add_component(component, connections=True)

        # Add the input-spaces to the in-Sockets.
        for in_socket in self.core.input_sockets:
            name = in_socket.name
            assert name in input_spaces, "ERROR: C'tor parameter `input_spaces` for ComponentTest does not contain " \
                                         "Space information for in-Socket '{}'!".format(name)
            self.core.connect(input_spaces[name], name)

        # Build the model.
        self.model.build()

    def test(self, out_socket_name, inputs=None, expected_outputs=None, decimals=7):
        """
        Does one test pass through the component to test.

        Args:
            out_socket_name (Union[str,dict,list]): The name of the out-Sockets to trigger.
            inputs (Optional[dict,np.ndarray]): Dict with the in-Socket names as keys and the data (np.arrays,
                dicts, tuples) as values. Alternatively - if there is only one possible in-Socket - can pass in
                the data directly. None if no in-Socket is needed.
            expected_outputs (Optional[any]): Optional the expected output generated by the out-Socket
                given by `out_socket_name`.

        Returns:
            any: Outputs of tested operations.
        """
        # Get the outs ..
        outs = self.model.call(sockets=out_socket_name, inputs=inputs)

        #  Optionally do test asserts here.
        if expected_outputs is not None:
            self.assert_equal(outs, expected_outputs, decimals=decimals)

        return outs

    def variable_test(self, variables, expected_values):
        """

        Args:
            variables ():
            expected_values ():

        Returns:

        """
        pass

    def get_variable_values(self, *variables):
        """
        Executes a session to retrieve the values of the provided variables.

        Args:
            variables (Union[variable,List[variable]]): Variable objects to retrieve from
                the graph.

        Returns:
            Values of the variables provided.
        """
        return self.model.get_variable_values(variables)

    @staticmethod
    def assert_equal(outs, expected_outputs, decimals=7):
        """
        Convenience wrapper: See implementation of `recursive_assert_almost_equal` for details.
        """
        recursive_assert_almost_equal(outs, expected_outputs, decimals=decimals)

