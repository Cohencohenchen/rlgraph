# Copyright 2018 The YARL-Project, All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

from yarl import backend
from yarl.models.model import Model


class ComponentTest(object):
    """
    A very simple (and limited) Model-wrapper to test a single component in a very easy and straightforward
    way.
    """
    def __init__(self, test_component):
        # Create our Model.
        self.model = Model.from_spec(backend())  # type: Model

        # Add the component to test and expose all its Sockets to the core component of our Model.
        core = self.model.get_default_model()
        core.add_component(test_component, expose=True)

        # Build the model.
        self.model.build()

    def test(self, out_socket_name, inputs, expected_outputs):
        """
        Does one test pass through the component to test.

        Args:
            out_socket_name (str): The name of the out-Socket to trigger (only one at a time for now).
            inputs (dict): Dict with the in-Socket names as keys and the data (np.arrays, dicts, tuples) as values.
            expected_output (any): The expected output generated by the out-Socket given by `out_socket_name`.

        Returns:
            Whether the test failed or not.
        """
        pass